#!/usr/bin/env python

libnames = [('mdtraj', 'md'), ('numpy', 'np'), ('keras', 'krs'), ('argparse', 'arg'), ('datetime', 'dt'), ('sys', 'sys')]

for (name, short) in libnames:
  try:
    lib = __import__(name)
  except:
    print "Library %s is not installed, exiting" % name
    exit(0)
  else:
    globals()[short] = lib

import encodetrajlib

# Parsing command line arguments
parser = arg.ArgumentParser(description='(Deep learning) autoencoders for molecular trajectory analysis, requires numpy, keras and mdtraj')

parser.add_argument('-i', dest='infile', default='traj.xtc',
help='Input trajectory in pdb, xtc, trr, dcd, netcdf or mdcrd, WARNING: the trajectory must be 1. centered in the PBC box, 2. fitted to a reference structure and 3. must contain only atoms to be analysed!')

parser.add_argument('-p', dest='intop', default='top.pdb',
help='Input topology in pdb, WARNING: the structure must be 1. centered in the PBC box and 2. must contain only atoms to be analysed!')

parser.add_argument('-boxx', dest='boxx', default=0.0, type=float,
help='Size of x coordinate of PBC box (from 0 to set value in nm)')

parser.add_argument('-boxy', dest='boxy', default=0.0, type=float,
help='Size of y coordinate of PBC box (from 0 to set value in nm)')

parser.add_argument('-boxz', dest='boxz', default=0.0, type=float,
help='Size of z coordinate of PBC box (from 0 to set value in nm)')

parser.add_argument('-testset', dest='testset', default=0.10, type=float,
help='Size of test set (fraction of the trajectory, default = 0.1)')

parser.add_argument('-shuffle', dest='shuffle', default='True',
help='Shuffle trajectory frames to obtain training and test set (default True)')

parser.add_argument('-layers', dest='layers', default=2, type=int,
help='Number of encoding layers (same as number of decoding, allowed values 2-3, default = 2)')

parser.add_argument('-layer1', dest='layer1', default=256, type=int,
help='Number of neurons in the second encoding layer (default = 256)')

parser.add_argument('-layer2', dest='layer2', default=256, type=int,
help='Number of neurons in the third encoding layer (default = 256)')

parser.add_argument('-encdim', dest='encdim', default=3, type=int,
help='Encoding dimension (default = 3)')

parser.add_argument('-actfun1', dest='actfun1', default='sigmoid',
help='Activation function of the first layer (default = sigmoid, for options see keras documentation)')

parser.add_argument('-actfun2', dest='actfun2', default='linear',
help='Activation function of the second layer (default = linear, for options see keras documentation)')

parser.add_argument('-optim', dest='optim', default='adam',
help='Optimizer (default = adam, for options see keras documentation)')

parser.add_argument('-loss', dest='loss', default='mean_squared_error',
help='Loss function (default = mean_squared_error, for options see keras documentation)')

parser.add_argument('-epochs', dest='epochs', default=100, type=int,
help='Number of epochs (default = 100, >1000 may be necessary for real life applications)')

parser.add_argument('-batch', dest='batch', default=256, type=int,
help='Batch size (0 = no batches, default = 256)')

parser.add_argument('-low', dest='lowfile', default='',
help='Output file with low-dimensional embedings (xvg or txt, default = no output)')

parser.add_argument('-high', dest='highfile', default='',
help='Output file with original coordinates and encoded-decoded coordinates (xvg or txt, default = no output)')

parser.add_argument('-filter', dest='filterfile', default='',
help='Output file with encoded-decoded trajectory in .xtc format (default = no output)')

# Extraction of collective motions does not work very well
parser.add_argument('-collective', dest='collectivefile', default='',
help='Output files with collective motions trajectories in .xtc format (default = no output)')

parser.add_argument('-ncollective', dest='ncollective', default=10, type=int,
help='Number of frames in collective motions trajectories (default = 20)')

parser.add_argument('-model', dest='modelfile', default='',
help='Prefix for output model files (experimental, default = no output)')

parser.add_argument('-plot', dest='plotfile', default='',
help='Model plot file in png (default = no output)')

parser.add_argument('-plumed', dest='plumedfile', default='',
help='Output file for Plumed (default = no output)')

args = parser.parse_args()

infilename = args.infile
intopname = args.intop
plotfilename = args.plotfile
boxx = args.boxx
boxy = args.boxy
boxz = args.boxz
if args.testset < 0.0 or args.testset > 1.0:
  print "ERROR: -testset must be 0.0 - 1.0"
  exit(0)
atestset = float(args.testset)

# Shuffling the trajectory before splitting
if args.shuffle == "True":
  shuffle = 1
elif args.shuffle == "False":
  shuffle = 0
else:
  print "ERROR: -shuffle %s not understood" % args.shuffle
  exit(0)
if args.layers < 2 or args.layers > 3:
  print "ERROR: -layers must be 2-3, for deeper learning contact authors"
  exit(0)
if args.layer1 > 1024:
  print "WARNING: You plan to use %i neurons in the second layer, could be slow"
if args.layers == 3:
  if args.layer2 > 1024:
    print "WARNING: You plan to use %i neurons in the third layer, could be slow"
if args.actfun1 not in ['softmax','elu','selu','softplus','softsign','relu','tanh','sigmoid','hard_sigmoid','linear']:
  print "ERROR: cannot understand -actfun1 %s" % args.actfun1
  exit(0)
if args.layers == 3:
  if args.actfun2 not in ['softmax','elu','selu','softplus','softsign','relu','tanh','sigmoid','hard_sigmoid','linear']:
    print "ERROR: cannot understand -actfun2 %s" % args.actfun2
    exit(0)
if args.layers == 2 and args.actfun2!='linear':
  print "ERROR: actfun2 must be linear for -layers 2"
  exit(0)
layers = args.layers
layer1 = args.layer1
layer2 = args.layer2
encdim = args.encdim
actfun1 = args.actfun1 
actfun2 = args.actfun2
epochs = args.epochs
optim = args.optim
batch = args.batch
loss = args.loss
lowfiletype = 0
highfiletype = 0
lowfilename = ''
if args.lowfile != '':
  if args.lowfile[-4:] == '.xvg':
    lowfilename = args.lowfile
    lowfiletype = 1
  elif args.lowfile[-4:] == '.txt':
    lowfilename = args.lowfile
    lowfiletype = 2
  else:
    lowfilename = args.lowfile + '.txt'
    lowfiletype = 2
highfilename = ''
if args.highfile != '':
  if args.highfile[-4:] == '.xvg':
    highfilename = args.highfile
    highfiletype = 1
  elif args.highfile[-4:] == '.txt':
    highfilename = args.highfile
    highfiletype = 2
  else:
    highfilename = args.highfile + '.txt'
    highfiletype = 2
filterfilename = ''
if args.filterfile != '':
  filterfilename = args.filterfile
  if filterfilename[-4:] != '.xtc':
    filterfilename = filterfilename + '.xtc'
modelfile = args.modelfile
collectivefile = args.collectivefile
ncollective = args.ncollective
plumedfile = args.plumedfile
if plumedfile != '':
  if plumedfile[-4:] != '.dat':
    plumedfile = plumedfile + '.dat'
encodetrajlib.encodetrajectory(infilename, intopname, plotfilename,
                               boxx, boxy, boxz, atestset,
                               shuffle, layers, layer1, layer2,
                               encdim, actfun1, actfun2,
                               optim, loss, epochs, batch,
                               lowfilename, lowfiletype, highfilename, highfiletype,
                               filterfilename, modelfile, plumedfile, collectivefile)


